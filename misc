# String Interpolation ----------------------------------------------------------------
# You can always use + or << to add a variable value into a string:

drink = "espresso"
"I love " + drink
# ==> I love espresso
"I love " << drink
# ==> I love espresso

# But if you want to do it for non-string values, you have to use .to_s to make it a string:
age = 26
"I am " + age.to_s + " years old."
# ==> "I am 26 years old."
"I am " << age.to_s << " years old."
# ==> "I am 26 years old."

# This is complicated, and complicated is not the Ruby way. 
# A better way to do this is with string interpolation. 
# The syntax looks like this:

"I love #{drink}."
# ==> I love espresso.
"I am #{age} years old."
# ==> I am 26 years old.
# All you need to do is place the variable name inside #{} within a string!

# EXAMPLE:

favorite_things = ["Ruby", "espresso", "candy"]

puts "A few of my favorite things:"

favorite_things.each do |thing|
  puts "I love #{thing}!"
end

-------------------------------------------------------------------------------------------
# Call and Response --------------------------------------------------------------------

# Ruby is less concerned about what kind of thing an object is 
# and only really cares about what method calls it responds to.

# .respond_to? takes a symbol and returns true if an object can receive that method, and false otherwise.

[1, 2, 3].respond_to?(:push)
# Would return true, since you can call .push on an array object.

[1, 2, 3].respond_to?(:to_sym)
# Would return false, since you can't turn an array into a symbol.

----------------------------------------------------------------------------------------
# Push method --------------------------------------------------------------------

alphabet = ["a", "b", "c"]
alphabet.push("d")

# Is the same as:

alphabet = ["a", "b", "c"]
alphabet << ("d")

# AND...

caption = "A giraffe surrounded by "
caption += "weezards!"

# Is the same as:

caption = "A giraffe surrounded by "
caption << "weezards!" 

# Instead of typing out the .push method name, you can simply use <<, 
# the concatenation operator (also known as "the shovel") to add an element to the end of an array.

#-------------------------------------------------------------------------------------------------
# Blocks
# A Ruby block is just a bit of code that can be executed. 
# Block syntax uses either do..end or curly braces ({})
# Each of the following is a block:

[1, 2, 3].each do |num|
  puts num
end

#

5.times { puts "I'm a block!"}
# ------------------------------------------------------------------------------------------
# Collect Method

# The collect method takes a block and applies the expression in the block to every element in an array.
# .collect returns a copy of fibs, but doesn't change (or mutate) the original fibs array. 
# If we want to do that, we can use .collect! with an exclamation point.
# FOR EXAMPLE:

my_nums = [1, 2, 3]
my_nums.collect { |num| num ** 2 }
# ==> [1, 4, 9]

my_nums.collect! { |num| num ** 2 }
# ==> [1, 4, 9]
my_nums
# ==> [1, 4, 9]

# ----------------------------------------------------------------------------------------
# Yielding

def block_test
  puts "We're in the method!"
  puts "Yielding to the block..."
  yield
  puts "We're back in the method!"
end

block_test { puts ">>> We're in the block!" }

# PUTS:

# We're in the method!
# Yielding to the block...
# >>> We're in the block!
# We're back in the method!


# Another example:

def yield_name(name)
  puts "In the method! Let's yield."
  yield("Kim")
  puts "In between the yields!"
  yield(name)
  puts "Block complete! Back in the method."
end

yield_name("Eric") { |n| puts "My name is #{n}." }

# Now call the method with your name!
yield_name("Whitney") { |n| puts "My name is #{n}." }

# PUTS

In the method! Let's yield.
My name is Kim.
In between the yields!
My name is Eric.
Block complete! Back in the method.
In the method! Let's yield.
My name is Kim.
In between the yields!
My name is Whitney.
Block complete! Back in the method.

# Another example

def double(mult) 
    puts "Something random"
    yield(4)
    puts "Hold on"
    yield(mult)
    puts "Block complete?"
end

double(7) {|n| puts "Double #{n} and you get #{n * 2}." }

# PUTS:

Something random
Double 4 and you get 8.
Hold on
Double 7 and you get 14.
Block complete?
